<div id="metastanza-gene"></div>
<style>
  togostanza-pagination-table {
    --togostanza-tbody-font-size: 12px;
  }
</style>

<script>
  (() => {
    // togoid endpoint
    const togoidAPIURL = 'https://api.togoid.dbcls.jp';
    const geneDataUrlEndpoint = 'https://integbio.jp/togosite/sparqlist/api/togosite_gene_summary';
    const transcriptDataUrlEndpoint = 'https://integbio.jp/togosite/sparqlist/api/togosite_transcript_summary';
    const geneExpUrlEndpoint = 'https://integbio.jp/togosite/sparqlist/api/gtex_log_tpm';
    const idTypes = ['ncbigene', 'ensembl_gene', 'hgnc'];

    // embed the id and id type via handlebars variable
    const subjectId = "{{id}}";
    const subjectIdType = "{{type}}";

    // for testing
    // const subjectId = "883";
    // const subjectIdType = 'ncbigene';
    // const subjectId = "2019";
    // const subjectIdType = 'hgnc';
    // const subjectId = "ENSG00000130234";
    // const subjectIdType = 'ensembl_gene';

    // access API and return JSON
    const fetchJSON = async (api) => {
      const response = await fetch(api);
      const json = await response.json();
      console.log(api);  // debug
      console.log(json); // debug
      return json;
    }

    // helper function to set multiple attributes
    const updateAttributes = (element, attributes) => {
      for (let key in attributes) {
        element.setAttribute(key, attributes[key]);
      }
      element.setAttribute('custom-css-url', '/css/stanza.css');
    }

    // create a list of target ID types by removing the subject ID type
    const targetIdTypes = async (subjectIdType) => {
      const index = idTypes.indexOf(subjectIdType);
      if (index > -1) {
        idTypes.splice(index, 1);
      }
      return idTypes;
    }

    // access convert APi endpoint and create ID Object
    const convertId = async (subjectId, subjectIdType) => {
      const targets = await targetIdTypes(subjectIdType);
      const array = [{'type': subjectIdType, 'ids': [subjectId]}];
      for (const targetIdType of targets) {
        const url = togoidAPIURL + '/convert?format=json&ids=' + subjectId + '&route=' + subjectIdType + ',' + targetIdType;
        const json = await fetchJSON(url);
        if (json.results.length != 0) {
          array.push({
            'type': targetIdType,
            'ids': json.results
          });
        }
      }
      return array;
    }

    const metastanzaDiv = document.getElementById("metastanza-gene");
    const geneDataUrl = (id, type) => geneDataUrlEndpoint + '?id=' + id + '&type=' + type;
    const transcriptDataUrl = (id) => transcriptDataUrlEndpoint + '?ensg=' + id;
    const geneExpUrl = (id, type) => geneExpUrlEndpoint + '?id=' + id + '&type=' + type;
    const titleDict = {
      'ncbigene': 'NCBI Gene',
      'ensembl_gene': 'Ensembl Gene',
      'hgnc': 'HGNC'
    };

    const addHeader = (id, type, level, text=titleDict[type] + ': ' + id, selected = false) => {
      const header = document.createElement(level);
      const headerText = (() => {
        if (selected) {
          return document.createTextNode('Selected Key ' + text);
        } else {
          return document.createTextNode(text);
        }
      })();
      header.appendChild(headerText);
      metastanzaDiv.appendChild(header);
    }

    const generateColumnSetting = async (id, type) => {
      const data = await fetchJSON(geneDataUrl(id, type));
      return Object.entries(data[0]).map(([key, value]) => {
        if (/ URL$/.test(key)) {
          return
        }

        const obj = {};
        obj.id = key;
        if (/ ID$/.test(key)) {
          obj.link = key.replace(" ID", " URL")
        }
        return obj;
      }).filter(Boolean);
    }

    const transcriptColumnSetting = [
        {"id":"enst_id", "label":"Ensembl Transcript ID", "link":"enst_url"},
        {"id":"label", "label":"Name"},
        {"id":"type", "label":"Biotype"},
        {"id":"location", "label":"Location"},
        {"id":"exon_count", "label":"# of Exons"},
        {"id":"uniprot_id", "label":"Uniprot", "escape": false}
    ]

    const addHashTable = async (id, type) => {
      const hashTable = document.createElement('togostanza-hash-table');
      const columnSetting = await generateColumnSetting(id, type);
      updateAttributes(hashTable, {
        'data-url': geneDataUrl(id, type),
        'data-type': 'json',
        'format-key': true,
        columns: JSON.stringify(columnSetting)
      });
      metastanzaDiv.appendChild(hashTable);
    }

    const addPaginationTable = async (id) => {
      const paginationTable = document.createElement('togostanza-pagination-table');
      const columnSetting = transcriptColumnSetting;
      updateAttributes(paginationTable, {
        'data-url': transcriptDataUrl(id),
        'data-type': 'json',
        'padding': '0',
        'page-size-option': '10,20,50,100',
        'page-slider': 'true',
        columns: JSON.stringify(columnSetting)
      });
      metastanzaDiv.appendChild(paginationTable);
    }

    const addBarchart = async (id, type) => {
      const barchart = document.createElement('togostanza-barchart');
      updateAttributes(barchart, {
        'chart-type': 'stacked',
        'data-url': geneExpUrl(id, type),
        'data-type': 'json',
        'category': 'desc',
        'value': 'logTPM',
        'group-by': 'tissueCategory',
        'category-title': 'Tissue',
        'value-title': 'Expression value (log2(TPM+1))',
        'legend-title': 'Tissue',
        'legend-padding': '30',
        'width': '800',
        'height': '300',
        'padding': '5',
        'padding-inner': '0.3',
        'padding-outer': '0.4',
        'xaxis-placement': 'bottom',
        'yaxis-placement': 'left',
        'xgrid': 'false',
        'ygrid': 'true',
        'xtick': 'false',
        'ytick': 'true',
        'xlabel-angle': '45',
        'xlabel-alignment': 'left',
        'ylabel-angle': '0',
        'xlabel-padding': '5',
        'ylabel-padding': '5',
        'xtitle-padding': '10',
        'ytitle-padding': '10',
        'xlabel-max-width': '500',
        'bar-width': '0.8',
        'legend': 'true',
        'metastanza-menu-placement': 'top-right'
      });
      metastanzaDiv.appendChild(barchart);
    }

    const addMainHeader = () => {
      const header = document.createElement('h1');
      const headerText = document.createTextNode('Gene');
      header.appendChild(headerText);
      metastanzaDiv.appendChild(header);
    }

    const addMainSubject = () => {
      addHeader(subjectId, subjectIdType, 'h2');
      addHashTable(subjectId, subjectIdType);
    }

    const createMetastanza = async () => {
      addMainHeader();
      //addMainSubject();
      const array = await convertId(subjectId, subjectIdType);
      for (const idObj of array) {
        for (const id of idObj.ids) {
          const type = idObj.type;
          const data = await fetchJSON(geneDataUrl(id, type));
          if (data.length > 0) {
            addHeader(id, type, 'h2');
            await addHashTable(id, type);
          }
          if (type == 'ensembl_gene') {
            addHeader(id, type, 'h3', 'Transcripts from ' + id);
            await addPaginationTable(id);
            addHeader(id, type, 'h3', 'Expression of ' + id + ' (GTEx v8)');
            await addBarchart(id, type);
            const linkToGTEx = document.createElement("a")
            updateAttributes(linkToGTEx, {'href': 'https://gtexportal.org/home/gene/' + id})
            linkToGTEx.appendChild(document.createTextNode("View at GTEx Portal"))
            metastanzaDiv.appendChild(linkToGTEx)
          }
        }
      }
    }

    // exec
    createMetastanza();
  })()
</script>
