<div id="metastanza-disease"></div>
<script>
  (() => {
    // togoid endpoint
    const togoidAPIURL = 'https://api.togoid.dbcls.jp';
    const dataUrlEndpoint = 'https://integbio.jp/togosite/sparqlist/api/test_disease_template_2';
    const idTypes = ['mondo', 'nando', 'hp', 'mesh'];

    // embed the id and id type via handlebars variable
    const subjectId = "{{id}}";
    const subjectIdType = "{{type}}";

    // for testing
    // const subjectId = "0011514";
    // const subjectIdType = 'mondo';

    // access API and return JSON
    const fetchJSON = async (api) => {
      const response = await fetch(api);
      const json = await response.json();
      console.log(api);  // debug
      console.log(json); // debug
      return json;
    }

    // helper function to set multiple attributes
    const updateAttributes = (element, attributes) => {
      for (let key in attributes) {
        element.setAttribute(key, attributes[key]);
      }
      element.setAttribute('custom-css-url', '/css/stanza.css');
    }

    // create a list of target ID types by removing the subject ID type
    const targetIdTypes = async (subjectIdType) => {
      const index = idTypes.indexOf(subjectIdType);
      if (index > -1) {
        idTypes.splice(index, 1);
      }
      return idTypes;
    }

    // access convert APi endpoint and create ID Object
    const convertId = async (subjectId, subjectIdType) => {
      const targets = await targetIdTypes(subjectIdType);
      const array = [];
      for (const targetIdType of targets) {
        const url = togoidAPIURL + '/convert?format=json&ids=' + subjectId + '&route=' + subjectIdType + ',' + targetIdType;
        const json = await fetchJSON(url);
        if (json.results.length != 0) {
          array.push({
            'type': targetIdType,
            'ids': json.results
          });
        }
      }
      return array;
    }

    const metastanzaDiv = document.getElementById("metastanza-disease");
    const dataUrl = (id, type) => dataUrlEndpoint + '?id=' + id + '&type=' + type;
    const titleDict = {
      'mondo': 'Mondo',
      'nando': 'NANDO',
      'hp': 'HP',
      'mesh': 'MeSH'
    };

    const addHeader = async (id, type, selected = false) => {
      const header = document.createElement('h2');

      const code = document.createElement('code');
      const codeLabel = document.createTextNode(titleDict[type] + ': ' + id);
      code.appendChild(codeLabel);

      const headerText = (() => {
        if (selected) {
          return document.createTextNode('Selected Key ');
        } else {
          return '';
        }
      })();

      header.appendChild(headerText);
      header.appendChild(code);

      return header;
    }

    const generateColumnSetting = async (id, type) => {
      const data = await fetchJSON(dataUrl(id, type));
      return Object.entries(data[0]).map(([key, value]) => {
        const obj = {};
        obj.id = key;
        if (/^http(s|)\:\/\//.test(value)) {
          obj.link = key;
        }
        return obj;
      });
    }

    const addHashTable = async (id, type) => {
      const hashTable = document.createElement('togostanza-hash-table');
      const columnSetting = await generateColumnSetting(id, type);
      updateAttributes(hashTable, {
        'data-url': dataUrl(id, type),
        'data-type': 'json',
        'format-key': true,
        columns: JSON.stringify(columnSetting)
      });
      return hashTable;
    }

    const addMainHeader = () => {
      const header = document.createElement('h1');
      const headerText = document.createTextNode('Disease');
      header.appendChild(headerText);
      metastanzaDiv.appendChild(header);
    }

    const addMainSubject = async () => {
      const header = await addHeader(subjectId, subjectIdType, true);
      const table = await addHashTable(subjectId, subjectIdType);
      const stanzaDiv = document.createElement('div');
      stanzaDiv.setAttribute('id', subjectId);
      stanzaDiv.appendChild(header);
      stanzaDiv.appendChild(table);
      metastanzaDiv.appendChild(stanzaDiv);
    }

    const createMetastanza = async () => {
      addMainHeader();
      addMainSubject();
      const array = await convertId(subjectId, subjectIdType);
      for (const idObj of array) {
        for (const id of idObj.ids) {
          const type = idObj.type;
          const data = await fetchJSON(dataUrl(id, type));
          if (data.length > 0) {
            const header = await addHeader(id, type);
            const table = await addHashTable(id, type);
            const stanzaDiv = document.createElement('div');
            stanzaDiv.setAttribute('id', id);
            stanzaDiv.appendChild(header);
            stanzaDiv.appendChild(table);
            metastanzaDiv.appendChild(stanzaDiv);
          }
        }
      }
    }

    // exec
    createMetastanza();
  })()
</script>
